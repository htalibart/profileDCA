import argparse
import pathlib

from profileDCA_viz.ppviz import *
from profileDCA_utils import io_management as iom

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-pf', '--potts_folders', help="Folders containing the *.npy files generated by PPbuild", type=pathlib.Path, nargs='+', default=[])
    parser.add_argument('-i', '--i_index', help="i index", type=int, default=None)
    parser.add_argument('-j', '--j_index', help="j index", type=int, default=None)
    parser.add_argument('-1', '--start_at_1', help="Start numbering at 1", action='store_true', default=True), 
    parser.add_argument('-0', '--start_at_0', help="Start numbering at 0", action='store_true', default=False), 
    parser.add_argument('-v', '--v_only', help="Only plot vi parameters", action='store_true', default=False), 
    parser.add_argument('-vn', '--v_norms_only', help="Only plot vi norms", action='store_true', default=False), 
    parser.add_argument('-wn', '--w_norms_only', help="Only plot wij norms", action='store_true', default=False), 
    parser.add_argument('-alph', '--alphabetical', help="Use alphabetical amino acid order", action='store_true', default=False), 
    args = vars(parser.parse_args())

    if args["alphabetical"]:
        alphabet=ALPHABET
    else:
        alphabet="CSTPAGNDEQHRKMILVFYW-"


    start_at_1 = args["start_at_1"] and not args["start_at_0"]

    potts_models = [iom.mrf_from_folder(pf) for pf in args["potts_folders"]]

    if (args["i_index"] is not None) and (args["j_index"] is not None):
        for mrf in potts_models:
            i = args["i_index"]
            j = args["j_index"]
            if start_at_1:
                i-=1
                j-=1
            plot_one_wij(mrf['w'][i][j], show_figure=False, alphabet=alphabet)
        plt.show()
    else:
       for mrf in potts_models:
        if args["v_only"]:
            visualize_v_parameters(mrf['v'], start_at_1=start_at_1, show_figure=False, alphabet=alphabet)
        elif args["v_norms_only"]:
            visualize_v_norms(ppfunctions.compute_v_norms(mrf['v']), start_at_1=start_at_1, show_figure=False)
        elif args["w_norms_only"]:
            visualize_w_norms(ppfunctions.compute_w_norms(mrf['w']), start_at_1=start_at_1, show_figure=True)
        else:
            visualize_mrf(mrf, start_at_1=start_at_1, show_figure=False, alphabet=alphabet)
        plt.show()



if __name__ == '__main__':
    main()
